generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model developer {
  id          Int          @id @default(autoincrement())
  first_name  String       @default("")
  middle_name String       @default("")
  last_name   String       @default("")
  suffix      String       @default("")
  role        String       @default("")
  team_id     Int?
  points      Int          @default(0)
  email       String       @default("")
  mobile_no   String       @default("")
  isAvailable Int          @default(0)
  isActive    Int
  task        task[]
  groupings   groupings?   @relation(fields: [groupingsId], references: [id])
  groupingsId Int?
  tech_stack  tech_stack[]

  @@index([team_id], map: "developer_teamId_fkey")
}

model projects {
  id          Int       @id @default(autoincrement())
  project     String    @default("")
  due_date    DateTime? @db.Date
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  team_id     Int?
  user_id     Int?
  status      String    @default("")
  team        team?     @relation(fields: [team_id], references: [id])
  user        user?     @relation(fields: [user_id], references: [id])
  isActive    Int       @default(1)
  task        task?     @relation(fields: [taskId], references: [id])
  taskId      Int?
  developerId Int?

  @@index([team_id], map: "projects_team_id_fkey")
  @@index([user_id], map: "projects_userId_fkey")
}

model tech_stack {
  id          Int        @id @default(autoincrement())
  title       String     @default("")
  description String     @default("")
  developerId Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  developer   developer? @relation(fields: [developerId], references: [id])
}

model task {
  id             Int        @id @default(autoincrement())
  decription     String     @default("")
  priority_level String     @default("")
  indicator      Int        @default(1)
  begin_date     DateTime?
  end_date       DateTime?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now())
  user_id        Int?
  user           user?      @relation(fields: [user_id], references: [id])
  developer      developer  @relation(fields: [developerId], references: [id])
  developerId    Int
  projectId      Int
  projectName    String     @default("")
  projects       projects[]

  @@index([user_id], map: "task_userId_fkey")
}

model team {
  id           Int        @id @default(autoincrement())
  description  String     @default("")
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now())
  developer_id Int
  projects_id  Int
  projects     projects[]
  groupings    groupings? @relation(fields: [groupingsId], references: [id])
  groupingsId  Int?
}

model groupings {
  id          Int         @id @default(autoincrement())
  developerId Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  teamId      Int
  developer   developer[]
  team        team[]
}

model user {
  id            Int        @id @default(autoincrement())
  first_name    String     @default("")
  middle_name   String     @default("")
  last_name     String     @default("")
  suffix        String     @default("")
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  email_address String     @unique @default("")
  password      String     @unique @default("")
  mobile_no     String     @default("")
  projects      projects[]
  task          task[]
}
